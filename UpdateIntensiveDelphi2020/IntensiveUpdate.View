unit IntensiveUpdate;

interface

uses
  Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ComCtrls, Vcl.StdCtrls, Vcl.Buttons;

type
  TForm1 = class(TForm)
    BitBtn1: TBitBtn;
    Label1: TLabel;
    ProgressBar1: TProgressBar;
    Memo1: TMemo;
    Button1: TButton;
    procedure BitBtn1Click(Sender: TObject);
    procedure Button1Click(Sender: TObject);
  private
    FTamanhoTotal : Integer;
    function GetPathApplication : String;
    function GetFileSize(Value : TFileName) : Int64;
    procedure DownloadUpdate;
    function ChecksUpdate : Boolean;
    procedure DescompactUpdate;
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation     uses shellapi;


{$R *.dfm}

{ TForm1 }

procedure TForm1.BitBtn1Click(Sender: TObject);
var
  vData : TDateTime;
begin
  ShowMessage(IntToStr(GetFileSize('C:\lixo\InensiveDelphi2020.exe')));
  { Obtendo a data de um executável qualquer. }
  FileAge('C:\lixo\InensiveDelphi2020.exe', vData);
  ShowMessage(DateTimeToStr(vData));

  { Obtendo a data do próprio exe }
  FileAge(ParamStr( 0 ), vdata);
  ShowMessage(DateTimeToStr(vData));

  { Outra forma seria assim }
  ShowMessage( DateTimeToStr(FileDateToDateTime(FileAge(ParamStr( 0 )))));

  { Mas neste último caso irá aparecer um Warning de deprecated }
end;

procedure TForm1.Button1Click(Sender: TObject);
begin
//
end;

function TForm1.ChecksUpdate: Boolean;
var
  lData : TDateTime;
  arq : TStringList;
  dttime:string;
begin
  Result := False;
  FileAge(GetPathApplication + 'IntenseveDelphi2020.exe', lData);

  ShellExecute(0, nil, 'cmd.exe', PWideChar('/c aws s3 ls s3://intensivedephi/InensiveDelphi2020.zip > '+
      GetPathApplication + '\status.txt'), nil,0);
  Sleep(3000);
  arq := TStringList.Create;
  try
    arq.LoadFromFile(GetPathApplication+'status.txt');
    dttime := arq[0];
    dttime := copy(dttime,9,2)+'/'+copy(dttime,6,2)+'/'+copy(dttime,1,4)+' '+copy(dttime,12,8);
  finally
    arq.Free;
    DeleteFile('c:\AppIntensive\status.txt');
  end;

  if StrToDateTime(dttime)>
    FileDateToDateTime(FileAge(GetPathApplication + 'IntenseveDelphi2020.exe')) then
    Result := True;
end;

procedure TForm1.DescompactUpdate;
var
  lNameUp : String;
begin
  if FileExists(GetPathApplication + 'IntensiveDelphi2020_BKP.exe') then
    DeleteFile(GetPathApplication + 'IntensiveDelphi2020_BKP.exe');

  RenameFile(GetPathApplication + 'IntensiveDelphi2020.exe',
    GetPathApplication + 'IntensiveDelphi2020_BKP.exe');

  lNameUp := GetPathApplication + 'IntensiveDelphi2020.zip';

  ShellExecute(0, nil, '7z', PWideChar(' e -aoa ' +
    lNameUp + ' -o' + GetPathApplication),'',1);
end;

procedure TForm1.DownloadUpdate;
begin
  if FileExists(GetPathApplication + 'IntensiveDelphi2020.zip') then
    DeleteFile(GetPathApplication + 'IntensiveDelphi2020.zip');

  ShellExecute(0, nil, 'cmd.exe', PWideChar('/c aws s3 cp s3://intensivedephi/InensiveDelphi2020.zip ' +
      GetPathApplication), nil,0);
  Sleep(3000);

   FTamanhoTotal := GetFileSize(GetPathApplication + 'IntensiveDelphi2020.zip');
end;

function TForm1.GetFileSize(Value: TFileName): Int64;
begin
  with TFileStream.Create(Value, fmOpenRead or fmShareExclusive) do
  try
    Result := Size;
  finally
   Free;
  end;
end;

function TForm1.GetPathApplication: String;
begin
  result := ExtractFilePath(Application.ExeName);
end;

end.
